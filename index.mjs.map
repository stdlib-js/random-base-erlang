{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/erlang.js","../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates parameters.\n*\n* @private\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {(Error|null)} error or null\n*\n* @example\n* var err = validate( 1, 2.5 );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( k, lambda ) {\n\tif ( !isPositiveInteger( k ) ) {\n\t\treturn new TypeError( 'invalid argument. First argument must be a positive integer. Value: `' + k + '`.' );\n\t}\n\tif ( !isPositive( lambda ) ) {\n\t\treturn new TypeError( 'invalid argument. Second argument must be a positive number. Value: `' + lambda + '`.' );\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math-base-special-ln' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from an Erlang distribution.\n*\n* @private\n* @param {PRNG} rand - PRNG for generating uniformly distributed numbers\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = erlang();\n* // returns <number>\n*/\nfunction erlang( rand, k, lambda ) {\n\tvar prod;\n\tvar i;\n\tprod = 1.0;\n\tfor ( i = 0; i < k; i++ ) {\n\t\tprod *= rand();\n\t}\n\treturn -(1.0/lambda) * ln( prod );\n}\n\n\n// EXPORTS //\n\nmodule.exports = erlang;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar randu = require( '@stdlib/random-base-mt19937' ).factory;\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar isPositiveInteger = require( '@stdlib/math-base-assert-is-positive-integer' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar validate = require( './validate.js' );\nvar erlang0 = require( './erlang.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for generating Erlang distributed random numbers.\n*\n* @param {PositiveInteger} [k] - shape parameter\n* @param {PositiveNumber} [lambda] - rate parameter\n* @param {Options} [options] - function options\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {PRNGSeedMT19937} [options.seed] - pseudorandom number generator seed\n* @param {PRNGStateMT19937} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} `k` must be a positive integer\n* @throws {TypeError} `lambda` must be a positive number\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide a valid state\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var erlang = factory( 2, 1.0 );\n* var v = erlang();\n* // returns <number>\n*\n* @example\n* var erlang = factory( 2, 2.0, {\n*     'seed': 297\n* });\n* var v = erlang();\n* // returns <number>\n*/\nfunction factory() {\n\tvar lambda;\n\tvar rand;\n\tvar opts;\n\tvar prng;\n\tvar err;\n\tvar k;\n\n\tif ( arguments.length === 0 ) {\n\t\trand = randu();\n\t} else if ( arguments.length === 1 ) {\n\t\topts = arguments[ 0 ];\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t\trand = opts.prng;\n\t\t} else {\n\t\t\trand = randu( opts );\n\t\t}\n\t} else {\n\t\tk = arguments[ 0 ];\n\t\tlambda = arguments[ 1 ];\n\t\terr = validate( k, lambda );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( arguments.length > 2 ) {\n\t\t\topts = arguments[ 2 ];\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( 'invalid argument. Options argument must be an object. Value: `' + opts + '`.' );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'prng' ) ) {\n\t\t\t\tif ( !isFunction( opts.prng ) ) {\n\t\t\t\t\tthrow new TypeError( 'invalid option. `prng` option must be a pseudorandom number generator function. Option: `' + opts.prng + '`.' );\n\t\t\t\t}\n\t\t\t\trand = opts.prng;\n\t\t\t} else {\n\t\t\t\trand = randu( opts );\n\t\t\t}\n\t\t} else {\n\t\t\trand = randu();\n\t\t}\n\t}\n\tif ( k === void 0 ) {\n\t\tprng = erlang2;\n\t} else {\n\t\tprng = erlang1;\n\t}\n\tsetReadOnly( prng, 'NAME', 'erlang' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts && opts.prng ) {\n\t\tsetReadOnly( prng, 'seed', null );\n\t\tsetReadOnly( prng, 'seedLength', null );\n\t\tsetReadWriteAccessor( prng, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( prng, 'stateLength', null );\n\t\tsetReadOnly( prng, 'byteLength', null );\n\t\tsetReadOnly( prng, 'toJSON', constantFunction( null ) );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t} else {\n\t\tsetReadOnlyAccessor( prng, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( prng, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( prng, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( prng, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( prng, 'byteLength', getStateSize );\n\t\tsetReadOnly( prng, 'toJSON', toJSON );\n\t\tsetReadOnly( prng, 'PRNG', rand );\n\t\trand = rand.normalized;\n\t}\n\treturn prng;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {PRNGSeedMT19937} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {PRNGStateMT19937} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {PRNGStateMT19937} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = prng.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tif ( k === void 0 ) {\n\t\t\tout.params = [];\n\t\t} else {\n\t\t\tout.params = [ k, lambda ];\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from an Erlang distribution with bound parameters.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = erlang1();\n\t* // returns <number>\n\t*/\n\tfunction erlang1() {\n\t\treturn erlang0( rand, k, lambda );\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from an Erlang distribution.\n\t*\n\t* @private\n\t* @param {PositiveInteger} k - shape parameter\n\t* @param {PositiveNumber} lambda - rate parameter\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = erlang2( 2, 1.0 );\n\t* // returns <number>\n\t*\n\t* @example\n\t* var v = erlang2( NaN, 1.0 );\n\t* // returns NaN\n\t*\n\t* v = erlang2( 2, NaN );\n\t* // returns NaN\n\t*\n\t* v = erlang2( 3.14, 1.0 );\n\t* // returns NaN\n\t*\n\t* v = erlang2( 2, 0.0 );\n\t* // returns NaN\n\t*/\n\tfunction erlang2( k, lambda ) {\n\t\tif (\n\t\t\tisnan( k ) ||\n\t\t\tisnan( lambda ) ||\n\t\t\t!isPositiveInteger( k ) ||\n\t\t\tlambda <= 0.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn erlang0( rand, k, lambda );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distributed pseudorandom numbers.\n*\n* @module @stdlib/random-base-erlang\n*\n* @example\n* var erlang = require( '@stdlib/random-base-erlang' );\n*\n* var v = erlang( 3, 2.5 );\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-erlang' ).factory;\n*\n* var erlang = factory( 8, 5.9, {\n*     'seed': 297\n* });\n*\n* var v = erlang();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar erlang = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( erlang, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = erlang;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number drawn from an Erlang distribution.\n*\n* @name erlang\n* @type {PRNG}\n* @param {PositiveInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = erlang( 2, 1.0 );\n* // returns <number>\n*\n* @example\n* var v = erlang( NaN, 1.0 );\n* // returns NaN\n*\n* v = erlang( 2, NaN );\n* // returns NaN\n*\n* v = erlang( 3.14, 1.0 );\n* // returns NaN\n*\n* v = erlang( 3, 0.0 );\n* // returns NaN\n*/\nvar erlang = factory();\n\n\n// EXPORTS //\n\nmodule.exports = erlang;\n"],"names":["isPositive","require$$0","isPrimitive","isPositiveInteger","require$$1","validate_1","k","lambda","TypeError","ln","erlang_1","rand","prod","i","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","require$$2","isObject","require$$3","isFunction","require$$4","hasOwnProp","require$$5","constantFunction","require$$6","noop","require$$7","randu","require$$8","factory","isnan","require$$9","require$$10","typedarray2json","require$$11","validate","require$$12","erlang0","require$$13","factory_1","opts","prng","err","arguments","length","erlang2","erlang1","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","normalized","seed","seedLength","stateLength","byteLength","state","s","out","name","NAME","params","NaN","erlang","lib"],"mappings":"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"}